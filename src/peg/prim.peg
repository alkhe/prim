{
	var serialize = function(o) {
		var str = '';
		switch (typeof o) {
			case 'string':
				str += JSON.stringify(o);
				break;
			case 'number':
			case 'boolean':
			case 'undefined':
			case 'function':
				str += o;
				break;
			case 'object':
				if (!o || o instanceof RegExp) {
					str += o;
				}
				else if (o instanceof Date) {
					str += 'new Date(' + o + ')';
				}
				else if (o instanceof Array) {
					str += '[' + arrayToSource(o) + ']';
				}
				else {
					str += '{' + objectToSource(o) + '}';
				}
				break;
		}
		return str;
	}

	var arrayToSource = function(o) {
		var str = '';
		for (var prop in o) {
			if (o.hasOwnProperty(prop)) {
				str += serialize(o[prop]) + ',';
			}
		}
		return str;
	};

	var objectToSource = function(o) {
		var str = '';
		for (var prop in o) {
			if (o.hasOwnProperty(prop)) {
				str += prop + ':' + serialize(o[prop]) + ',';
			}
		}
		return str;
	};

	var toSource = function(o) {
		var str = '';
		for (var prop in o) {
			if (o.hasOwnProperty(prop)) {
				str += 'var ' + prop + '=' + serialize(o[prop]) + ';';
			}
		}
		return str;
	};

	eval(toSource(arguments[1]));

}

root
	= _ ns:nodes _ { return ns; }

boundednode
	= n:name _ ps:properties _ ch:children { return '<' + n + ps + '>' + ch + '</' + n + '>'; }
	/ n:name _ ch:children { return '<' + n + '>' + ch + '</' + n + '>'; }
	/ n:name _ ps:properties _ '/' { return '<' + n + ps + ' />'; }
	/ n:name _ '/' { return '<' + n + ' />'; }
	/ n:name _ ps:properties { return '<' + n + ps + '></' + n + '>'; }
	/ evalnode
	/ textnode

textnode
	= "'" s:singlequotechar* "'" { return s.join(''); }
	/ '"' s:doublequotechar* '"' { return s.join(''); }

evalnode
	= hash _ '{' code:codechar* '}' { return eval(code.join('')); }
	// with (options) { return eval(code.join('')); }

children
	= '{' _ ns:nodes _ '}' { return ns; }
	/ '|' s:pipechar* '|' { return s.join(''); }

node
	= n:name { return '<' + n + '></' + n + '>'; }

nodes
	= b:boundednode _ ns:nodes { return b + ns; }
	/ n:node __ ns:nodes { return n + ns; }
	/ boundednode
	/ node
	/ empty

properties
	= '(' _ as:attributes _ ')' { return ' ' + as; }
	/ '(' _ ')' { return ''; }

attributes
	= a:attribute __ as:attributes { return a + ' ' + as; }
	/ attribute

attribute
	= n:name _ '=' _ a:attvalue { return n + '=' + a; }
	/ name

attvalue
	= "'" v:$((!"'" char)*) "'" { return "'" + v + "'"; }
	/ '"' v:$((!'"' char)*) '"' { return '"' + v + '"'; }

char
	= [\u0009\u000A\u000D\u0020-\uD7FF\uE000-\uFFFD]
	/*
	= [\u0009]
	/ [\u000A]
	/ [\u000D]
	/ [\u0020-\uD7FF]
	/ [\uE000-\uFFFD]
	*/

name
	= $(namestart namechar*)

namestart
	= [:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]
	/*
	= ':'
	/ [A-Z]
	/ '_'
	/ [a-z]
	/ [\u00C0-\u00D6]
	/ [\u00D8-\u00F6]
	/ [\u00F8-\u02FF]
	/ [\u0370-\u037D]
	/ [\u037F-\u1FFF]
	/ [\u200C-\u200D]
	/ [\u2070-\u218F]
	/ [\u2C00-\u2FEF]
	/ [\u3001-\uD7FF]
	/ [\uF900-\uFDCF]
	/ [\uFDF0-\uFFFD]
	*/

namechar
	= namestart
	/ [-\.0-9\u00B7\u0300-\u036F\u203F-\u2040]
	/*
	/ '-'
	/ '.'
	/ [0-9]
	/ [\u00B7]
	/ [\u0300-\u036F]
	/ [\u203F-\u2040]*/

unescape
	= '\\'
	/ '/'
	/ 'b' { return '\b'; }
	/ 'f' { return '\f'; }
	/ 'n' { return '\n'; }
	/ 'r' { return '\r'; }
	/ 't' { return '\t'; }
	/ 'u' digits:$(hexchar) {
		return String.fromCharCode(parseInt(digits, 16));
	}

hexchar
	= [0-9a-f]i

singlequotechar
	= [^'\\]
	/ escape esc:(
			"'"
			/ unescape
		) { return esc; }

doublequotechar
	= [^"\\]
	/ escape esc:(
			'"'
			/ unescape
		) { return esc; }

pipechar
	= [^\|\\]
	/ escape esc:(
			'|'
			/ unescape
		) { return esc; }
	/ escape

codechar
	= [^\{\}]
	/ '{' c:codechar* '}' { return '{' + c.join('') + '}'; }

hash
	= $('#')

escape
	= $('\\')

empty
	= $('')

line
	= $('\n')

_

	= $([ \t\r\n\f]*)
__
	= $([ \t\r\n\f]+)
