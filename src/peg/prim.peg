{
	var vm = arguments[2];
}

root
	= _ t:top _ { return t; }

top
	= ns:nodes _ t:('%' _ t:top? { return t; }
				/ '%'? { return ''; }) { return ns + t; }

node
	/*= n:name _ ps:properties _ ch:children { return '<' + n + ps + '>' + ch + '</' + n + '>'; }
	/ n:name _ ch:children { return '<' + n + '>' + ch + '</' + n + '>'; }
	/ n:name _ ps:properties _ '/' { return '<' + n + ps + ' />'; }
	/ n:name _ '/' { return '<' + n + ' />'; }
	/ n:name _ ps:properties { return '<' + n + ps + '></' + n + '>'; }
	/ n:name { return '<' + n + '></' + n + '>'; }*/
	= nodebuilder
	/ evalnode
	/ textnode

nodebuilder
	= n:name _ b:buildfunctions {
		var item = {
			name: n,
			children: '',
			attributes: '',
			selfclosing: false
		};

		for (var i = 0; i < b.length; i++) {
			switch (b[i][0]) {
				case 0:
					item.children += b[i][1];
					break;
				case 1:
					item.attributes += b[i][1];
					break;
				case 2:
					item.selfclosing = true;
					break;
				default:
					break;
			}
		}

		return (item.selfclosing
			? '<' + item.name + item.attributes + ' />'
			: '<' + item.name + item.attributes + '>' + item.children + '</' + item.name + '>'
		);
	}

buildfunctions
	= b:buildfunction _ bs:buildfunctions { return [b].concat(bs); }
	/ empty { return []; }

buildfunction
	= ch:children { return [0, ch]; }
	/ ps:properties { return [1, ps]; }
	/ '/' { return [2]; }

textnode
	= "'" s:singlequotechar* "'" { return s.join(''); }
	/ '"' s:doublequotechar* '"' { return s.join(''); }

evalnode
	= hash _ '{' code:codechar* ('}' / &'%') { return vm(code.join('')); }
	// with (options) { return eval(code.join('')); }

children
	= '{' _ ns:nodes _ ('}' / &'%') { return ns; }
	/ '|' s:pipechar* ('|' / &'%') { return s.join(''); }

nodes
	= n:node ns:(_ ns:nodes { return ns; }
				/ empty { return ''; }) { return n + ns; }
	/ empty

properties
	= '(' _ as:attributes _ ')' { return ' ' + as; }
	/ '(' _ ')' { return ''; }

attributes
	= a:attribute _ as:attributes { return a + ' ' + as; }
	/ attribute

attribute
	= n:name _ '=' _ a:attvalue { return n + '=' + a; }
	/ name

attvalue
	= "'" v:$((!"'" char)*) "'" { return "'" + v + "'"; }
	/ '"' v:$((!'"' char)*) '"' { return '"' + v + '"'; }

char
	= [\u0009\u000A\u000D\u0020-\uD7FF\uE000-\uFFFD]
	/*
	= [\u0009]
	/ [\u000A]
	/ [\u000D]
	/ [\u0020-\uD7FF]
	/ [\uE000-\uFFFD]
	*/

name
	= $(namestart namechar*)

namestart
	= [:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]
	/*
	= ':'
	/ [A-Z]
	/ '_'
	/ [a-z]
	/ [\u00C0-\u00D6]
	/ [\u00D8-\u00F6]
	/ [\u00F8-\u02FF]
	/ [\u0370-\u037D]
	/ [\u037F-\u1FFF]
	/ [\u200C-\u200D]
	/ [\u2070-\u218F]
	/ [\u2C00-\u2FEF]
	/ [\u3001-\uD7FF]
	/ [\uF900-\uFDCF]
	/ [\uFDF0-\uFFFD]
	*/

namechar
	= namestart
	/ [-\.0-9\u00B7\u0300-\u036F\u203F-\u2040]
	/*
	/ '-'
	/ '.'
	/ [0-9]
	/ [\u00B7]
	/ [\u0300-\u036F]
	/ [\u203F-\u2040]*/

unescape
	= '\\'
	/ '/'
	/ 'b' { return '\b'; }
	/ 'f' { return '\f'; }
	/ 'n' { return '\n'; }
	/ 'r' { return '\r'; }
	/ 't' { return '\t'; }
	/ 'u' digits:$(hexchar) {
		return String.fromCharCode(parseInt(digits, 16));
	}

hexchar
	= [0-9a-f]i

singlequotechar
	= [^'\\]
	/ escape esc:(
			"'"
			/ unescape
		) { return esc; }

doublequotechar
	= [^"\\]
	/ escape esc:(
			'"'
			/ unescape
		) { return esc; }

pipechar
	= [^\|\\]
	/ escape esc:(
			'|'
			/ unescape
		) { return esc; }
	/ escape

codechar
	= [^\{\}]
	/ '{' c:codechar* '}' { return '{' + c.join('') + '}'; }

hash
	= $('#')

escape
	= $('\\')

empty
	= $('')

line
	= $('\n')

_

	= $([ \t\r\n\f]*)
/*__
	= $([ \t\r\n\f]+)*/
